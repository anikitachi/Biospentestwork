import socket 
from cryptography.fernet import Fernet
import hashlib
import hmac
host='127.0.0.1'
port=64235

hmackey=b"ninteachanthendi"
symkey=Fernet.generate_key()
kobj=Fernet(symkey)        
         

def cal_hmac(key,msg):
    hobj=hmac.new(key,msg.encode('utf-8'),hashlib.sha512)
    return hobj.hexdigest()
    


def encrypt_message(message):
    
        return kobj.encrypt((message).encode('utf-8'))
    
    
def decrypt_message(encrypmsg):
   
    return kobj.decrypt(encrypmsg).decode('utf-8')

def main(): #the main function of the program
    server=socket.socket(socket.AF_INET,socket.SOCK_STREAM)

    try:
        server.bind((host,port))
        print(f"running the server on Host:{host} , Port-{port}")

    except Exception as e:
        print(f"unable to bind : {e}")

    server.listen(1)

    try:
        client,address=server.accept() #client will act as socket object #address is a tuple which contains the host and port
        print("successfully connected to client")
        client.send(symkey) 
        client.send(("Welcome to the chatroom").encode('utf-8')) #welcome message by server
        client.send(hmackey)
        
        
    except Exception as e:
        print(f"Failed to establish connection:{e}")
        
    
   
    while True:
        #client response
        encrypmsg=client.recv(1024)
        rcvhmk=client.recv(1024).decode('utf-8')
        decrypmsg=decrypt_message(encrypmsg)
        print(decrypmsg)
        
        clchmks=cal_hmac(hmackey,decrypmsg)
        if clchmks==rcvhmk:
            print("Integrity check status: Affirmative")
        else:
            print("Integrity check status: Negative") 
        
        
        
        
        #server message
        mesage=input("Enter your message:")
        if mesage.lower()=='quit':
            client.close()
            break
        else:
            encryptmsg=encrypt_message(mesage)
            client.send(encryptmsg)#message
            
            clchmk=cal_hmac(hmackey,mesage)
            client.send(clchmk.encode('utf-8'))#hmac send    

        
       
if __name__=='__main__':
            main()