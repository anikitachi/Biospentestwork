import socket
from cryptography.fernet import Fernet
import hashlib
import hmac
host='127.0.0.1'
port=64235

kobj=None


def cal_hmac(hmved,msg):
    hobj=hmac.new(hmved,msg.encode('utf-8'),hashlib.sha512)
    return hobj.hexdigest()



def encrypt_message(message):
        
    encrpmsg=kobj.encrypt((message).encode('utf-8'))
    return encrpmsg
    


def decrypt_message(encryptmsg):
    
     
    decrpmsg=kobj.decrypt(encryptmsg).decode('utf-8')
    return decrpmsg
 

def main(): 
    global kobj
    client=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    try:
        client.connect((host,port))
        print("successfully connected to  the server")
    except Exception as e:
        print(f"unable to connect : {e}") 
        
    symkey_r=client.recv(1024)
    x=client.recv(1024).decode('utf-8')
    hmac_recieved=client.recv(1024)
    print(x)
    kobj=Fernet(symkey_r)
   
    
   
     
    while True:
        #client message
        message=input("Enter message:") 
        if message.lower()=='quit':
            client.close()
            break
        #encypts and sends the message to the server
        encryp_msg_send=encrypt_message(message)
        client.send(encryp_msg_send)
        
        #calculating hmac and sending it to the server
        clchmk=cal_hmac(hmac_recieved,message)
        client.send(clchmk.encode('utf-8'))
        
        #server response
        encryptmsg=client.recv(1024) #message receive
        decryptmsg=decrypt_message(encryptmsg)
        print(decryptmsg)
        rcvhmk=client.recv(1024).decode('utf-8') #hmac receive
        clchmks=cal_hmac(hmac_recieved,decryptmsg)
        if clchmks==rcvhmk:
            print("Integrity check status: Affirmative")
        else:
            print("Integrity check status: Negative")

        
    
   
   
   
if __name__=='__main__':
            main()